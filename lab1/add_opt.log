*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'add.ll'
source_filename = "add.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'add.ll'
source_filename = "add.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @add(i32 noundef %0, i32 noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = add nsw i32 %5, %6
  ret i32 %7
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness

# End machine code for function add.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
144B	  $eax = COPY %7:gr32
160B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
144B	  $eax = COPY %7:gr32
160B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY $esi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
  $eax = COPY %7:gr32
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function add: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function add: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function add: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = ADD32rm killed %8:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = COPY killed %8:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  %2:gr32 = COPY killed $esi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  %3:gr32 = COPY killed %2:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %7:gr32 = COPY killed %8:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $eax = COPY killed %7:gr32
  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY killed %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY killed %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY killed $esi
32B	  %0:gr32 = COPY killed $edi
48B	  %1:gr32 = COPY killed %0:gr32
64B	  %3:gr32 = COPY killed %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY killed %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY killed %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY %0:gr32
64B	  %3:gr32 = COPY %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %2:gr32 = COPY $esi
32B	  %0:gr32 = COPY $edi
48B	  %1:gr32 = COPY %0:gr32
64B	  %3:gr32 = COPY %2:gr32
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
128B	  %7:gr32 = COPY %8:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit killed $eax

# End machine code for function add.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0, $esi in %2

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
16B	  %3:gr32 = COPY $esi
32B	  %1:gr32 = COPY $edi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store (s32) into %ir.4)
112B	  %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
160B	  $eax = COPY %7:gr32
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

0B	bb.0 (%ir-block.2):
	  liveins: $edi, $esi
80B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
96B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
112B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
144B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
176B	  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function add: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi, $esi

bb.0 (%ir-block.2):
  liveins: $edi, $esi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.4)
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function add.

*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  store i32 0, i32* %1, align 4
  store i32 1, i32* %2, align 4
  store i32 2, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call i32 @add(i32 noundef %5, i32 noundef %6)
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 3.140000e+00
  %10 = fptrunc double %9 to float
  store float %10, float* %4, align 4
  %11 = load float, float* %4, align 4
  %12 = fptosi float %11 to i32
  ret i32 %12
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY $eax
192B	  %10:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
224B	  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
240B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
256B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
272B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
288B	  $eax = COPY %2:gr32
304B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY $eax
192B	  %10:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
224B	  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
240B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
256B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
272B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
288B	  $eax = COPY %2:gr32
304B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY %15:gr32
  $esi = COPY %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %10:fr64 = CVTSI2SDrr %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr %10:fr64(tied-def 0), %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY %2:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %15:gr32
  $esi = COPY killed %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY killed $eax
  %10:fr64 = CVTSI2SDrr killed %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr killed %10:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY killed %2:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %15:gr32
  $esi = COPY killed %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY killed $eax
  %10:fr64 = CVTSI2SDrr killed %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr killed %10:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY killed %2:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %15:gr32
  $esi = COPY killed %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY killed $eax
  %10:fr64 = CVTSI2SDrr killed %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr killed %10:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY killed %2:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %15:gr32
  $esi = COPY killed %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY killed $eax
  %10:fr64 = CVTSI2SDrr killed %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = MULSDrr killed %10:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY killed %2:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %15:gr32
  $esi = COPY killed %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY killed $eax
  %10:fr64 = CVTSI2SDrr killed %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = COPY killed %10:fr64
  %8:fr64 = MULSDrr %8:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY killed %2:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = COPY killed %15:gr32
  $esi = COPY killed %14:gr32
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY killed $eax
  %10:fr64 = CVTSI2SDrr killed %13:gr32
  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  %8:fr64 = COPY killed %10:fr64
  %8:fr64 = MULSDrr %8:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $eax = COPY killed %2:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY killed %15:gr32
128B	  $esi = COPY killed %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %10:fr64 = CVTSI2SDrr killed %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
224B	  %8:fr64 = COPY killed %10:fr64
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY killed %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY killed %15:gr32
128B	  $esi = COPY killed %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %10:fr64 = CVTSI2SDrr killed %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
224B	  %8:fr64 = COPY killed %10:fr64
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), killed %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr killed %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY killed %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %10:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
224B	  %8:fr64 = COPY %10:fr64
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %10:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
224B	  %8:fr64 = COPY %10:fr64
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY killed $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  %14:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  $edi = COPY %15:gr32
128B	  $esi = COPY %14:gr32
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %13:gr32 = COPY $eax
192B	  %8:fr64 = CVTSI2SDrr %13:gr32
208B	  %7:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  %8:fr64 = MULSDrr %8:fr64(tied-def 0), %7:fr64, implicit $mxcsr
256B	  %5:fr32 = CVTSD2SSrr %8:fr64, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, %5:fr32 :: (store (s32) into %ir.4)
288B	  %2:gr32 = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
304B	  $eax = COPY %2:gr32
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
208B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
256B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
288B	  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
208B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
256B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
288B	  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
208B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
256B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
288B	  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
208B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
256B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
288B	  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
208B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
256B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
288B	  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
64B	  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
80B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
208B	  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
240B	  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
256B	  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
272B	  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
288B	  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
320B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr %stack.3, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm %stack.3, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-24]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 3.140000e+00, align=8

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -16, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  renamable $edi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.3)
  CALL64pcrel32 @add, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
  renamable $xmm0 = CVTSI2SDrr killed renamable $eax
  renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
  renamable $xmm0 = MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
  MOVSSmr $rbp, 1, $noreg, -4, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.4)
  renamable $eax = CVTTSS2SIrm $rbp, 1, $noreg, -4, $noreg, implicit $mxcsr :: (load (s32) from %ir.4)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

